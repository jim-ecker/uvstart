name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1'  # Mondays at 2 AM UTC

permissions:
  contents: read
  security-events: write

jobs:
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        run: |
          BASE=${{ github.event.pull_request.base.sha || 'HEAD^' }}
          HEAD=${{ github.event.pull_request.head.sha || 'HEAD' }}
          echo "Scanning from $BASE to $HEAD"
          trufflehog git file://. --base "$BASE" --head "$HEAD" --only-verified || true

  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Safety
        run: pip install safety

      - name: Scan Python dependencies
        run: |
          mkdir -p reports
          if [ -f requirements.txt ]; then
            safety check -r requirements.txt --json > reports/safety-report.json || true
          fi

      - name: Upload Safety report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: safety-report
          path: reports/safety-report.json

  static-analysis:
    name: Static Code Analysis (Semgrep)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: |
            p/security-audit
            p/secrets
            p/python
            p/c
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'cpp' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check licenses
        run: |
          echo "üîç Checking license compliance..."
          test -f LICENSE

          # Search for GPL references in source files
          if find . \( -name "*.py" -o -name "*.cpp" -o -name "*.hpp" \) | xargs grep -l "GPL" | grep -v LICENSE; then
            echo "‚ùå Found GPL references in source files"
            exit 1
          fi

          # Ensure MIT License is declared
          grep -q "MIT License" LICENSE
