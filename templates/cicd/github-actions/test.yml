name: Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHONPATH: ${{ "{{" }} github.workspace {{ "}}" }}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        {% if backend == "uv" %}
        backend: ["uv"]
        {% elif backend == "poetry" %}
        backend: ["poetry"]
        {% else %}
        backend: ["{{ backend }}"]
        {% endif %}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ "{{" }} matrix.python-version {{ "}}" }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ "{{" }} matrix.python-version {{ "}}" }}

    {% if backend == "uv" %}
    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"

    - name: Install dependencies
      run: |
        uv sync --group dev
    {% elif backend == "poetry" %}
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ "{{" }} runner.os {{ "}}" }}-${{ "{{" }} matrix.python-version {{ "}}" }}-${{ "{{" }} hashFiles('**/poetry.lock') {{ "}}" }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    {% elif backend == "pdm" %}
    - name: Install PDM
      uses: pdm-project/setup-pdm@v3
      with:
        python-version: ${{ "{{" }} matrix.python-version {{ "}}" }}

    - name: Install dependencies
      run: |
        pdm sync --dev
    {% else %}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        {% if enable_poetry %}
        pip install poetry
        poetry install
        {% else %}
        pip install -e .
        pip install pytest pytest-cov black ruff mypy
        {% endif %}
    {% endif %}

    - name: Lint with ruff
      run: |
        {% if backend == "uv" %}
        uv run ruff check .
        {% elif backend == "poetry" %}
        poetry run ruff check .
        {% elif backend == "pdm" %}
        pdm run ruff check .
        {% else %}
        ruff check .
        {% endif %}

    - name: Format check with black
      run: |
        {% if backend == "uv" %}
        uv run black --check .
        {% elif backend == "poetry" %}
        poetry run black --check .
        {% elif backend == "pdm" %}
        pdm run black --check .
        {% else %}
        black --check .
        {% endif %}

    - name: Type check with mypy
      run: |
        {% if backend == "uv" %}
        uv run mypy {{ package_name }}
        {% elif backend == "poetry" %}
        poetry run mypy {{ package_name }}
        {% elif backend == "pdm" %}
        pdm run mypy {{ package_name }}
        {% else %}
        mypy {{ package_name }}
        {% endif %}

    - name: Test with pytest
      run: |
        {% if backend == "uv" %}
        uv run pytest tests/ --cov={{ package_name }} --cov-report=xml --cov-report=term-missing
        {% elif backend == "poetry" %}
        poetry run pytest tests/ --cov={{ package_name }} --cov-report=xml --cov-report=term-missing
        {% elif backend == "pdm" %}
        pdm run pytest tests/ --cov={{ package_name }} --cov-report=xml --cov-report=term-missing
        {% else %}
        pytest tests/ --cov={{ package_name }} --cov-report=xml --cov-report=term-missing
        {% endif %}

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false 